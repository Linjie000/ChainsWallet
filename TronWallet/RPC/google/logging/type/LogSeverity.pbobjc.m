// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/type/log_severity.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/logging/type/LogSeverity.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LogSeverityRoot

@implementation LogSeverityRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - Enum LogSeverity

GPBEnumDescriptor *LogSeverity_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Default\000Debug\000Info\000Notice\000Warning\000Error\000"
        "Critical\000Alert\000Emergency\000";
    static const int32_t values[] = {
        LogSeverity_Default,
        LogSeverity_Debug,
        LogSeverity_Info,
        LogSeverity_Notice,
        LogSeverity_Warning,
        LogSeverity_Error,
        LogSeverity_Critical,
        LogSeverity_Alert,
        LogSeverity_Emergency,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(LogSeverity)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:LogSeverity_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL LogSeverity_IsValidValue(int32_t value__) {
  switch (value__) {
    case LogSeverity_Default:
    case LogSeverity_Debug:
    case LogSeverity_Info:
    case LogSeverity_Notice:
    case LogSeverity_Warning:
    case LogSeverity_Error:
    case LogSeverity_Critical:
    case LogSeverity_Alert:
    case LogSeverity_Emergency:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
