// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/distribution.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Distribution_BucketOptions;
@class Distribution_BucketOptions_Explicit;
@class Distribution_BucketOptions_Exponential;
@class Distribution_BucketOptions_Linear;
@class Distribution_Range;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - DistributionRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface DistributionRoot : GPBRootObject
@end

#pragma mark - Distribution

typedef GPB_ENUM(Distribution_FieldNumber) {
  Distribution_FieldNumber_Count = 1,
  Distribution_FieldNumber_Mean = 2,
  Distribution_FieldNumber_SumOfSquaredDeviation = 3,
  Distribution_FieldNumber_Range = 4,
  Distribution_FieldNumber_BucketOptions = 6,
  Distribution_FieldNumber_BucketCountsArray = 7,
};

/// Distribution contains summary statistics for a population of values and,
/// optionally, a histogram representing the distribution of those values across
/// a specified set of histogram buckets.
///
/// The summary statistics are the count, mean, sum of the squared deviation from
/// the mean, the minimum, and the maximum of the set of population of values.
///
/// The histogram is based on a sequence of buckets and gives a count of values
/// that fall into each bucket.  The boundaries of the buckets are given either
/// explicitly or by specifying parameters for a method of computing them
/// (buckets of fixed width or buckets of exponentially increasing width).
///
/// Although it is not forbidden, it is generally a bad idea to include
/// non-finite values (infinities or NaNs) in the population of values, as this
/// will render the `mean` and `sum_of_squared_deviation` fields meaningless.
@interface Distribution : GPBMessage

/// The number of values in the population. Must be non-negative.
@property(nonatomic, readwrite) int64_t count;

/// The arithmetic mean of the values in the population. If `count` is zero
/// then this field must be zero.
@property(nonatomic, readwrite) double mean;

/// The sum of squared deviations from the mean of the values in the
/// population.  For values x_i this is:
///
///     Sum[i=1..n]((x_i - mean)^2)
///
/// Knuth, "The Art of Computer Programming", Vol. 2, page 323, 3rd edition
/// describes Welford's method for accumulating this sum in one pass.
///
/// If `count` is zero then this field must be zero.
@property(nonatomic, readwrite) double sumOfSquaredDeviation;

/// If specified, contains the range of the population values. The field
/// must not be present if the `count` is zero.
@property(nonatomic, readwrite, strong, null_resettable) Distribution_Range *range;
/// Test to see if @c range has been set.
@property(nonatomic, readwrite) BOOL hasRange;

/// Defines the histogram bucket boundaries.
@property(nonatomic, readwrite, strong, null_resettable) Distribution_BucketOptions *bucketOptions;
/// Test to see if @c bucketOptions has been set.
@property(nonatomic, readwrite) BOOL hasBucketOptions;

/// If `bucket_options` is given, then the sum of the values in `bucket_counts`
/// must equal the value in `count`.  If `bucket_options` is not given, no
/// `bucket_counts` fields may be given.
///
/// Bucket counts are given in order under the numbering scheme described
/// above (the underflow bucket has number 0; the finite buckets, if any,
/// have numbers 1 through N-2; the overflow bucket has number N-1).
///
/// The size of `bucket_counts` must be no greater than N as defined in
/// `bucket_options`.
///
/// Any suffix of trailing zero bucket_count fields may be omitted.
@property(nonatomic, readwrite, strong, null_resettable) GPBInt64Array *bucketCountsArray;
/// The number of items in @c bucketCountsArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger bucketCountsArray_Count;

@end

#pragma mark - Distribution_Range

typedef GPB_ENUM(Distribution_Range_FieldNumber) {
  Distribution_Range_FieldNumber_Min = 1,
  Distribution_Range_FieldNumber_Max = 2,
};

/// The range of the population values.
@interface Distribution_Range : GPBMessage

/// The minimum of the population values.
@property(nonatomic, readwrite) double min;

/// The maximum of the population values.
@property(nonatomic, readwrite) double max;

@end

#pragma mark - Distribution_BucketOptions

typedef GPB_ENUM(Distribution_BucketOptions_FieldNumber) {
  Distribution_BucketOptions_FieldNumber_LinearBuckets = 1,
  Distribution_BucketOptions_FieldNumber_ExponentialBuckets = 2,
  Distribution_BucketOptions_FieldNumber_ExplicitBuckets = 3,
};

typedef GPB_ENUM(Distribution_BucketOptions_Options_OneOfCase) {
  Distribution_BucketOptions_Options_OneOfCase_GPBUnsetOneOfCase = 0,
  Distribution_BucketOptions_Options_OneOfCase_LinearBuckets = 1,
  Distribution_BucketOptions_Options_OneOfCase_ExponentialBuckets = 2,
  Distribution_BucketOptions_Options_OneOfCase_ExplicitBuckets = 3,
};

/// A Distribution may optionally contain a histogram of the values in the
/// population.  The histogram is given in `bucket_counts` as counts of values
/// that fall into one of a sequence of non-overlapping buckets.  The sequence
/// of buckets is described by `bucket_options`.
///
/// A bucket specifies an inclusive lower bound and exclusive upper bound for
/// the values that are counted for that bucket.  The upper bound of a bucket
/// is strictly greater than the lower bound.
///
/// The sequence of N buckets for a Distribution consists of an underflow
/// bucket (number 0), zero or more finite buckets (number 1 through N - 2) and
/// an overflow bucket (number N - 1).  The buckets are contiguous:  the lower
/// bound of bucket i (i > 0) is the same as the upper bound of bucket i - 1.
/// The buckets span the whole range of finite values: lower bound of the
/// underflow bucket is -infinity and the upper bound of the overflow bucket is
/// +infinity.  The finite buckets are so-called because both bounds are
/// finite.
///
/// `BucketOptions` describes bucket boundaries in one of three ways.  Two
/// describe the boundaries by giving parameters for a formula to generate
/// boundaries and one gives the bucket boundaries explicitly.
///
/// If `bucket_boundaries` is not given, then no `bucket_counts` may be given.
@interface Distribution_BucketOptions : GPBMessage

/// Exactly one of these three fields must be set.
@property(nonatomic, readonly) Distribution_BucketOptions_Options_OneOfCase optionsOneOfCase;

/// The linear bucket.
@property(nonatomic, readwrite, strong, null_resettable) Distribution_BucketOptions_Linear *linearBuckets;

/// The exponential buckets.
@property(nonatomic, readwrite, strong, null_resettable) Distribution_BucketOptions_Exponential *exponentialBuckets;

/// The explicit buckets.
@property(nonatomic, readwrite, strong, null_resettable) Distribution_BucketOptions_Explicit *explicitBuckets;

@end

/// Clears whatever value was set for the oneof 'options'.
void Distribution_BucketOptions_ClearOptionsOneOfCase(Distribution_BucketOptions *message);

#pragma mark - Distribution_BucketOptions_Linear

typedef GPB_ENUM(Distribution_BucketOptions_Linear_FieldNumber) {
  Distribution_BucketOptions_Linear_FieldNumber_NumFiniteBuckets = 1,
  Distribution_BucketOptions_Linear_FieldNumber_Width = 2,
  Distribution_BucketOptions_Linear_FieldNumber_Offset = 3,
};

/// Specify a sequence of buckets that all have the same width (except
/// overflow and underflow).  Each bucket represents a constant absolute
/// uncertainty on the specific value in the bucket.
///
/// Defines `num_finite_buckets + 2` (= N) buckets with these boundaries for
/// bucket `i`:
///
///    Upper bound (0 <= i < N-1):     offset + (width * i).
///    Lower bound (1 <= i < N):       offset + (width * (i - 1)).
@interface Distribution_BucketOptions_Linear : GPBMessage

/// Must be greater than 0.
@property(nonatomic, readwrite) int32_t numFiniteBuckets;

/// Must be greater than 0.
@property(nonatomic, readwrite) double width;

/// Lower bound of the first bucket.
@property(nonatomic, readwrite) double offset;

@end

#pragma mark - Distribution_BucketOptions_Exponential

typedef GPB_ENUM(Distribution_BucketOptions_Exponential_FieldNumber) {
  Distribution_BucketOptions_Exponential_FieldNumber_NumFiniteBuckets = 1,
  Distribution_BucketOptions_Exponential_FieldNumber_GrowthFactor = 2,
  Distribution_BucketOptions_Exponential_FieldNumber_Scale = 3,
};

/// Specify a sequence of buckets that have a width that is proportional to
/// the value of the lower bound.  Each bucket represents a constant relative
/// uncertainty on a specific value in the bucket.
///
/// Defines `num_finite_buckets + 2` (= N) buckets with these boundaries for
/// bucket i:
///
///    Upper bound (0 <= i < N-1):     scale * (growth_factor ^ i).
///    Lower bound (1 <= i < N):       scale * (growth_factor ^ (i - 1)).
@interface Distribution_BucketOptions_Exponential : GPBMessage

/// Must be greater than 0.
@property(nonatomic, readwrite) int32_t numFiniteBuckets;

/// Must be greater than 1.
@property(nonatomic, readwrite) double growthFactor;

/// Must be greater than 0.
@property(nonatomic, readwrite) double scale;

@end

#pragma mark - Distribution_BucketOptions_Explicit

typedef GPB_ENUM(Distribution_BucketOptions_Explicit_FieldNumber) {
  Distribution_BucketOptions_Explicit_FieldNumber_BoundsArray = 1,
};

/// A set of buckets with arbitrary widths.
///
/// Defines `size(bounds) + 1` (= N) buckets with these boundaries for
/// bucket i:
///
///    Upper bound (0 <= i < N-1):     bounds[i]
///    Lower bound (1 <= i < N);       bounds[i - 1]
///
/// There must be at least one element in `bounds`.  If `bounds` has only one
/// element, there are no finite buckets, and that single element is the
/// common boundary of the overflow and underflow buckets.
@interface Distribution_BucketOptions_Explicit : GPBMessage

/// The values must be monotonically increasing.
@property(nonatomic, readwrite, strong, null_resettable) GPBDoubleArray *boundsArray;
/// The number of items in @c boundsArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger boundsArray_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
