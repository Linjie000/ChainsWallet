// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/metric.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_GEN_VERSION != 30001
#error This file was generated by a different version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class LabelDescriptor;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum MetricDescriptor_MetricKind

/// The kind of measurement. It describes how the data is reported.
typedef GPB_ENUM(MetricDescriptor_MetricKind) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  MetricDescriptor_MetricKind_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /// Do not use this default value.
  MetricDescriptor_MetricKind_MetricKindUnspecified = 0,

  /// Instantaneous measurements of a varying quantity.
  MetricDescriptor_MetricKind_Gauge = 1,

  /// Changes over non-overlapping time intervals.
  MetricDescriptor_MetricKind_Delta = 2,

  /// Cumulative value over time intervals that can overlap.
  /// The overlapping intervals must have the same start time.
  MetricDescriptor_MetricKind_Cumulative = 3,
};

GPBEnumDescriptor *MetricDescriptor_MetricKind_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL MetricDescriptor_MetricKind_IsValidValue(int32_t value);

#pragma mark - Enum MetricDescriptor_ValueType

/// The value type of a metric.
typedef GPB_ENUM(MetricDescriptor_ValueType) {
  /// Value used if any message's field encounters a value that is not defined
  /// by this enum. The message will also have C functions to get/set the rawValue
  /// of the field.
  MetricDescriptor_ValueType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  /// Do not use this default value.
  MetricDescriptor_ValueType_ValueTypeUnspecified = 0,

  /// The value is a boolean.
  /// This value type can be used only if the metric kind is `GAUGE`.
  MetricDescriptor_ValueType_Bool = 1,

  /// The value is a signed 64-bit integer.
  MetricDescriptor_ValueType_Int64 = 2,

  /// The value is a double precision floating point number.
  MetricDescriptor_ValueType_Double = 3,

  /// The value is a text string.
  /// This value type can be used only if the metric kind is `GAUGE`.
  MetricDescriptor_ValueType_String = 4,

  /// The value is a [`Distribution`][google.api.Distribution].
  MetricDescriptor_ValueType_Distribution = 5,

  /// The value is money.
  MetricDescriptor_ValueType_Money = 6,
};

GPBEnumDescriptor *MetricDescriptor_ValueType_EnumDescriptor(void);

/// Checks to see if the given value is defined by the enum or was not known at
/// the time this source was generated.
BOOL MetricDescriptor_ValueType_IsValidValue(int32_t value);

#pragma mark - MetricRoot

/// Exposes the extension registry for this file.
///
/// The base class provides:
/// @code
///   + (GPBExtensionRegistry *)extensionRegistry;
/// @endcode
/// which is a @c GPBExtensionRegistry that includes all the extensions defined by
/// this file and all files that it depends on.
@interface MetricRoot : GPBRootObject
@end

#pragma mark - MetricDescriptor

typedef GPB_ENUM(MetricDescriptor_FieldNumber) {
  MetricDescriptor_FieldNumber_Name = 1,
  MetricDescriptor_FieldNumber_LabelsArray = 2,
  MetricDescriptor_FieldNumber_MetricKind = 3,
  MetricDescriptor_FieldNumber_ValueType = 4,
  MetricDescriptor_FieldNumber_Unit = 5,
  MetricDescriptor_FieldNumber_Description_p = 6,
  MetricDescriptor_FieldNumber_DisplayName = 7,
  MetricDescriptor_FieldNumber_Type = 8,
};

/// Defines a metric type and its schema.
@interface MetricDescriptor : GPBMessage

/// Resource name. The format of the name may vary between different
/// implementations. For examples:
///
///     projects/{project_id}/metricDescriptors/{type=**}
///     metricDescriptors/{type=**}
@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

/// The metric type including a DNS name prefix, for example
/// `"compute.googleapis.com/instance/cpu/utilization"`. Metric types
/// should use a natural hierarchical grouping such as the following:
///
///     compute.googleapis.com/instance/cpu/utilization
///     compute.googleapis.com/instance/disk/read_ops_count
///     compute.googleapis.com/instance/network/received_bytes_count
///
/// Note that if the metric type changes, the monitoring data will be
/// discontinued, and anything depends on it will break, such as monitoring
/// dashboards, alerting rules and quota limits. Therefore, once a metric has
/// been published, its type should be immutable.
@property(nonatomic, readwrite, copy, null_resettable) NSString *type;

/// The set of labels that can be used to describe a specific instance of this
/// metric type. For example, the
/// `compute.googleapis.com/instance/network/received_bytes_count` metric type
/// has a label, `loadbalanced`, that specifies whether the traffic was
/// received through a load balanced IP address.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<LabelDescriptor*> *labelsArray;
/// The number of items in @c labelsArray without causing the array to be created.
@property(nonatomic, readonly) NSUInteger labelsArray_Count;

/// Whether the metric records instantaneous values, changes to a value, etc.
@property(nonatomic, readwrite) MetricDescriptor_MetricKind metricKind;

/// Whether the measurement is an integer, a floating-point number, etc.
@property(nonatomic, readwrite) MetricDescriptor_ValueType valueType;

/// The unit in which the metric value is reported. It is only applicable
/// if the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The
/// supported units are a subset of [The Unified Code for Units of
/// Measure](http://unitsofmeasure.org/ucum.html) standard:
///
/// **Basic units (UNIT)**
///
/// * `bit`   bit
/// * `By`    byte
/// * `s`     second
/// * `min`   minute
/// * `h`     hour
/// * `d`     day
///
/// **Prefixes (PREFIX)**
///
/// * `k`     kilo    (10**3)
/// * `M`     mega    (10**6)
/// * `G`     giga    (10**9)
/// * `T`     tera    (10**12)
/// * `P`     peta    (10**15)
/// * `E`     exa     (10**18)
/// * `Z`     zetta   (10**21)
/// * `Y`     yotta   (10**24)
/// * `m`     milli   (10**-3)
/// * `u`     micro   (10**-6)
/// * `n`     nano    (10**-9)
/// * `p`     pico    (10**-12)
/// * `f`     femto   (10**-15)
/// * `a`     atto    (10**-18)
/// * `z`     zepto   (10**-21)
/// * `y`     yocto   (10**-24)
/// * `Ki`    kibi    (2**10)
/// * `Mi`    mebi    (2**20)
/// * `Gi`    gibi    (2**30)
/// * `Ti`    tebi    (2**40)
///
/// **Grammar**
///
/// The grammar includes the dimensionless unit `1`, such as `1/s`.
///
/// The grammar also includes these connectors:
///
/// * `/`    division (as an infix operator, e.g. `1/s`).
/// * `.`    multiplication (as an infix operator, e.g. `GBy.d`)
///
/// The grammar for a unit is as follows:
///
///     Expression = Component { "." Component } { "/" Component } ;
///
///     Component = [ PREFIX ] UNIT [ Annotation ]
///               | Annotation
///               | "1"
///               ;
///
///     Annotation = "{" NAME "}" ;
///
/// Notes:
///
/// * `Annotation` is just a comment if it follows a `UNIT` and is
///    equivalent to `1` if it is used alone. For examples,
///    `{requests}/s == 1/s`, `By{transmitted}/s == By/s`.
/// * `NAME` is a sequence of non-blank printable ASCII characters not
///    containing '{' or '}'.
@property(nonatomic, readwrite, copy, null_resettable) NSString *unit;

/// A detailed description of the metric, which can be used in documentation.
@property(nonatomic, readwrite, copy, null_resettable) NSString *description_p;

/// A concise name for the metric, which can be displayed in user interfaces.
/// Use sentence case without an ending period, for example "Request count".
@property(nonatomic, readwrite, copy, null_resettable) NSString *displayName;

@end

/// Fetches the raw value of a @c MetricDescriptor's @c metricKind property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t MetricDescriptor_MetricKind_RawValue(MetricDescriptor *message);
/// Sets the raw value of an @c MetricDescriptor's @c metricKind property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetMetricDescriptor_MetricKind_RawValue(MetricDescriptor *message, int32_t value);

/// Fetches the raw value of a @c MetricDescriptor's @c valueType property, even
/// if the value was not defined by the enum at the time the code was generated.
int32_t MetricDescriptor_ValueType_RawValue(MetricDescriptor *message);
/// Sets the raw value of an @c MetricDescriptor's @c valueType property, allowing
/// it to be set to a value that was not defined by the enum at the time the code
/// was generated.
void SetMetricDescriptor_ValueType_RawValue(MetricDescriptor *message, int32_t value);

#pragma mark - Metric

typedef GPB_ENUM(Metric_FieldNumber) {
  Metric_FieldNumber_Labels = 2,
  Metric_FieldNumber_Type = 3,
};

/// A specific metric identified by specifying values for all of the
/// labels of a [`MetricDescriptor`][google.api.MetricDescriptor].
@interface Metric : GPBMessage

/// An existing metric type, see [google.api.MetricDescriptor][google.api.MetricDescriptor].
/// For example, `compute.googleapis.com/instance/cpu/usage_time`.
@property(nonatomic, readwrite, copy, null_resettable) NSString *type;

/// The set of labels that uniquely identify a metric. To specify a
/// metric, all labels enumerated in the `MetricDescriptor` must be
/// assigned values.
@property(nonatomic, readwrite, strong, null_resettable) NSMutableDictionary<NSString*, NSString*> *labels;
/// The number of items in @c labels without causing the array to be created.
@property(nonatomic, readonly) NSUInteger labels_Count;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
