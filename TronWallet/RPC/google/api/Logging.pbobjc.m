// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/logging.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "google/api/Logging.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - LoggingRoot

@implementation LoggingRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - LoggingRoot_FileDescriptor

static GPBFileDescriptor *LoggingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Logging

@implementation Logging

@dynamic producerDestinationsArray, producerDestinationsArray_Count;
@dynamic consumerDestinationsArray, consumerDestinationsArray_Count;

typedef struct Logging__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *producerDestinationsArray;
  NSMutableArray *consumerDestinationsArray;
} Logging__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "producerDestinationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Logging_LoggingDestination),
        .number = Logging_FieldNumber_ProducerDestinationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Logging__storage_, producerDestinationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "consumerDestinationsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Logging_LoggingDestination),
        .number = Logging_FieldNumber_ConsumerDestinationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Logging__storage_, consumerDestinationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Logging class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Logging__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Logging_LoggingDestination

@implementation Logging_LoggingDestination

@dynamic monitoredResource;
@dynamic logsArray, logsArray_Count;

typedef struct Logging_LoggingDestination__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *logsArray;
  NSString *monitoredResource;
} Logging_LoggingDestination__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "logsArray",
        .dataTypeSpecific.className = NULL,
        .number = Logging_LoggingDestination_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Logging_LoggingDestination__storage_, logsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "monitoredResource",
        .dataTypeSpecific.className = NULL,
        .number = Logging_LoggingDestination_FieldNumber_MonitoredResource,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Logging_LoggingDestination__storage_, monitoredResource),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Logging_LoggingDestination class]
                                     rootClass:[LoggingRoot class]
                                          file:LoggingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Logging_LoggingDestination__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
