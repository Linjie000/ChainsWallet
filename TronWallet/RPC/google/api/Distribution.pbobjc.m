// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/distribution.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/Any.pbobjc.h>
 #import <Protobuf/Timestamp.pbobjc.h>
#else
 #import "google/protobuf/Any.pbobjc.h"
 #import "google/protobuf/Timestamp.pbobjc.h"
#endif

 #import "google/api/Distribution.pbobjc.h"
 #import "google/api/Annotations.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"

#pragma mark - DistributionRoot

@implementation DistributionRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[AnnotationsRoot extensionRegistry]];
    [registry addExtensions:[GPBAnyRoot extensionRegistry]];
    [registry addExtensions:[GPBTimestampRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - DistributionRoot_FileDescriptor

static GPBFileDescriptor *DistributionRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"google.api"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Distribution

@implementation Distribution

@dynamic count;
@dynamic mean;
@dynamic sumOfSquaredDeviation;
@dynamic hasRange, range;
@dynamic hasBucketOptions, bucketOptions;
@dynamic bucketCountsArray, bucketCountsArray_Count;

typedef struct Distribution__storage_ {
  uint32_t _has_storage_[1];
  Distribution_Range *range;
  Distribution_BucketOptions *bucketOptions;
  GPBInt64Array *bucketCountsArray;
  int64_t count;
  double mean;
  double sumOfSquaredDeviation;
} Distribution__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Distribution__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mean",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_FieldNumber_Mean,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Distribution__storage_, mean),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "sumOfSquaredDeviation",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_FieldNumber_SumOfSquaredDeviation,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Distribution__storage_, sumOfSquaredDeviation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "range",
        .dataTypeSpecific.className = GPBStringifySymbol(Distribution_Range),
        .number = Distribution_FieldNumber_Range,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Distribution__storage_, range),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bucketOptions",
        .dataTypeSpecific.className = GPBStringifySymbol(Distribution_BucketOptions),
        .number = Distribution_FieldNumber_BucketOptions,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Distribution__storage_, bucketOptions),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "bucketCountsArray",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_FieldNumber_BucketCountsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Distribution__storage_, bucketCountsArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Distribution class]
                                     rootClass:[DistributionRoot class]
                                          file:DistributionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Distribution__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Distribution_Range

@implementation Distribution_Range

@dynamic min;
@dynamic max;

typedef struct Distribution_Range__storage_ {
  uint32_t _has_storage_[1];
  double min;
  double max;
} Distribution_Range__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "min",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_Range_FieldNumber_Min,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Distribution_Range__storage_, min),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "max",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_Range_FieldNumber_Max,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Distribution_Range__storage_, max),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Distribution_Range class]
                                     rootClass:[DistributionRoot class]
                                          file:DistributionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Distribution_Range__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Distribution_BucketOptions

@implementation Distribution_BucketOptions

@dynamic optionsOneOfCase;
@dynamic linearBuckets;
@dynamic exponentialBuckets;
@dynamic explicitBuckets;

typedef struct Distribution_BucketOptions__storage_ {
  uint32_t _has_storage_[2];
  Distribution_BucketOptions_Linear *linearBuckets;
  Distribution_BucketOptions_Exponential *exponentialBuckets;
  Distribution_BucketOptions_Explicit *explicitBuckets;
} Distribution_BucketOptions__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linearBuckets",
        .dataTypeSpecific.className = GPBStringifySymbol(Distribution_BucketOptions_Linear),
        .number = Distribution_BucketOptions_FieldNumber_LinearBuckets,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions__storage_, linearBuckets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "exponentialBuckets",
        .dataTypeSpecific.className = GPBStringifySymbol(Distribution_BucketOptions_Exponential),
        .number = Distribution_BucketOptions_FieldNumber_ExponentialBuckets,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions__storage_, exponentialBuckets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "explicitBuckets",
        .dataTypeSpecific.className = GPBStringifySymbol(Distribution_BucketOptions_Explicit),
        .number = Distribution_BucketOptions_FieldNumber_ExplicitBuckets,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions__storage_, explicitBuckets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Distribution_BucketOptions class]
                                     rootClass:[DistributionRoot class]
                                          file:DistributionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Distribution_BucketOptions__storage_)
                                         flags:0];
    static const char *oneofs[] = {
      "options",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Distribution_BucketOptions_ClearOptionsOneOfCase(Distribution_BucketOptions *message) {
  GPBDescriptor *descriptor = [message descriptor];
  GPBOneofDescriptor *oneof = descriptor->oneofs_[0];
  GPBMaybeClearOneof(message, oneof, -1, 0);
}
#pragma mark - Distribution_BucketOptions_Linear

@implementation Distribution_BucketOptions_Linear

@dynamic numFiniteBuckets;
@dynamic width;
@dynamic offset;

typedef struct Distribution_BucketOptions_Linear__storage_ {
  uint32_t _has_storage_[1];
  int32_t numFiniteBuckets;
  double width;
  double offset;
} Distribution_BucketOptions_Linear__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "numFiniteBuckets",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_BucketOptions_Linear_FieldNumber_NumFiniteBuckets,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions_Linear__storage_, numFiniteBuckets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "width",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_BucketOptions_Linear_FieldNumber_Width,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions_Linear__storage_, width),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "offset",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_BucketOptions_Linear_FieldNumber_Offset,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions_Linear__storage_, offset),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Distribution_BucketOptions_Linear class]
                                     rootClass:[DistributionRoot class]
                                          file:DistributionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Distribution_BucketOptions_Linear__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Distribution_BucketOptions_Exponential

@implementation Distribution_BucketOptions_Exponential

@dynamic numFiniteBuckets;
@dynamic growthFactor;
@dynamic scale;

typedef struct Distribution_BucketOptions_Exponential__storage_ {
  uint32_t _has_storage_[1];
  int32_t numFiniteBuckets;
  double growthFactor;
  double scale;
} Distribution_BucketOptions_Exponential__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "numFiniteBuckets",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_BucketOptions_Exponential_FieldNumber_NumFiniteBuckets,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions_Exponential__storage_, numFiniteBuckets),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "growthFactor",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_BucketOptions_Exponential_FieldNumber_GrowthFactor,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions_Exponential__storage_, growthFactor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "scale",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_BucketOptions_Exponential_FieldNumber_Scale,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions_Exponential__storage_, scale),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Distribution_BucketOptions_Exponential class]
                                     rootClass:[DistributionRoot class]
                                          file:DistributionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Distribution_BucketOptions_Exponential__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Distribution_BucketOptions_Explicit

@implementation Distribution_BucketOptions_Explicit

@dynamic boundsArray, boundsArray_Count;

typedef struct Distribution_BucketOptions_Explicit__storage_ {
  uint32_t _has_storage_[1];
  GPBDoubleArray *boundsArray;
} Distribution_BucketOptions_Explicit__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boundsArray",
        .dataTypeSpecific.className = NULL,
        .number = Distribution_BucketOptions_Explicit_FieldNumber_BoundsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Distribution_BucketOptions_Explicit__storage_, boundsArray),
        .flags = GPBFieldRepeated | GPBFieldPacked,
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Distribution_BucketOptions_Explicit class]
                                     rootClass:[DistributionRoot class]
                                          file:DistributionRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Distribution_BucketOptions_Explicit__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
