// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Contract.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "core/Contract.pbobjc.h"
 #import "core/Tron.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ContractRoot

@implementation ContractRoot

+ (GPBExtensionRegistry*)extensionRegistry {
  // This is called by +initialize so there is no need to worry
  // about thread safety and initialization of registry.
  static GPBExtensionRegistry* registry = nil;
  if (!registry) {
    GPBDebugCheckRuntimeVersion();
    registry = [[GPBExtensionRegistry alloc] init];
    [registry addExtensions:[TronRoot extensionRegistry]];
  }
  return registry;
}

@end

#pragma mark - ContractRoot_FileDescriptor

static GPBFileDescriptor *ContractRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AccountCreateContract

@implementation AccountCreateContract

@dynamic type;
@dynamic accountName;
@dynamic ownerAddress;

typedef struct AccountCreateContract__storage_ {
  uint32_t _has_storage_[1];
  AccountType type;
  NSData *accountName;
  NSData *ownerAddress;
} AccountCreateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = AccountType_EnumDescriptor,
        .number = AccountCreateContract_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccountCreateContract__storage_, type),
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "accountName",
        .dataTypeSpecific.className = NULL,
        .number = AccountCreateContract_FieldNumber_AccountName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AccountCreateContract__storage_, accountName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = AccountCreateContract_FieldNumber_OwnerAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AccountCreateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccountCreateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccountCreateContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t AccountCreateContract_Type_RawValue(AccountCreateContract *message) {
  GPBDescriptor *descriptor = [AccountCreateContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AccountCreateContract_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetAccountCreateContract_Type_RawValue(AccountCreateContract *message, int32_t value) {
  GPBDescriptor *descriptor = [AccountCreateContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AccountCreateContract_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - AccountUpdateContract

@implementation AccountUpdateContract

@dynamic accountName;
@dynamic ownerAddress;

typedef struct AccountUpdateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *accountName;
  NSData *ownerAddress;
} AccountUpdateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "accountName",
        .dataTypeSpecific.className = NULL,
        .number = AccountUpdateContract_FieldNumber_AccountName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AccountUpdateContract__storage_, accountName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = AccountUpdateContract_FieldNumber_OwnerAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AccountUpdateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AccountUpdateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AccountUpdateContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferContract

@implementation TransferContract

@dynamic ownerAddress;
@dynamic toAddress;
@dynamic amount;

typedef struct TransferContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *toAddress;
  int64_t amount;
} TransferContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_ToAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferContract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferContract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferAssetContract

@implementation TransferAssetContract

@dynamic assetName;
@dynamic ownerAddress;
@dynamic toAddress;
@dynamic amount;

typedef struct TransferAssetContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *assetName;
  NSData *ownerAddress;
  NSData *toAddress;
  int64_t amount;
} TransferAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_AssetName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_ToAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransferAssetContract_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TransferAssetContract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferAssetContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoteAssetContract

@implementation VoteAssetContract

@dynamic ownerAddress;
@dynamic voteAddressArray, voteAddressArray_Count;
@dynamic support;
@dynamic count;

typedef struct VoteAssetContract__storage_ {
  uint32_t _has_storage_[1];
  int32_t count;
  NSData *ownerAddress;
  NSMutableArray *voteAddressArray;
} VoteAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoteAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "voteAddressArray",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_VoteAddressArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoteAssetContract__storage_, voteAddressArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "support",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_Support,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = VoteAssetContract_FieldNumber_Count,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VoteAssetContract__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoteAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoteAssetContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoteWitnessContract

@implementation VoteWitnessContract

@dynamic ownerAddress;
@dynamic votesArray, votesArray_Count;
@dynamic support;

typedef struct VoteWitnessContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSMutableArray *votesArray;
} VoteWitnessContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoteWitnessContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "votesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(VoteWitnessContract_Vote),
        .number = VoteWitnessContract_FieldNumber_VotesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VoteWitnessContract__storage_, votesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "support",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_FieldNumber_Support,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoteWitnessContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoteWitnessContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - VoteWitnessContract_Vote

@implementation VoteWitnessContract_Vote

@dynamic voteAddress;
@dynamic voteCount;

typedef struct VoteWitnessContract_Vote__storage_ {
  uint32_t _has_storage_[1];
  NSData *voteAddress;
  int64_t voteCount;
} VoteWitnessContract_Vote__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "voteAddress",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_Vote_FieldNumber_VoteAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VoteWitnessContract_Vote__storage_, voteAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "voteCount",
        .dataTypeSpecific.className = NULL,
        .number = VoteWitnessContract_Vote_FieldNumber_VoteCount,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VoteWitnessContract_Vote__storage_, voteCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VoteWitnessContract_Vote class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VoteWitnessContract_Vote__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WitnessCreateContract

@implementation WitnessCreateContract

@dynamic ownerAddress;
@dynamic URL;

typedef struct WitnessCreateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *URL;
} WitnessCreateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = WitnessCreateContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WitnessCreateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = WitnessCreateContract_FieldNumber_URL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WitnessCreateContract__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WitnessCreateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WitnessCreateContract__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WitnessUpdateContract

@implementation WitnessUpdateContract

@dynamic ownerAddress;
@dynamic updateURL;

typedef struct WitnessUpdateContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *updateURL;
} WitnessUpdateContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = WitnessUpdateContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WitnessUpdateContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "updateURL",
        .dataTypeSpecific.className = NULL,
        .number = WitnessUpdateContract_FieldNumber_UpdateURL,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(WitnessUpdateContract__storage_, updateURL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WitnessUpdateContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WitnessUpdateContract__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\014\006\241!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AssetIssueContract

@implementation AssetIssueContract

@dynamic ownerAddress;
@dynamic name;
@dynamic abbr;
@dynamic totalSupply;
@dynamic frozenSupplyArray, frozenSupplyArray_Count;
@dynamic trxNum;
@dynamic num;
@dynamic startTime;
@dynamic endTime;
@dynamic voteScore;
@dynamic description_p;
@dynamic URL;
@dynamic freeAssetNetLimit;
@dynamic publicFreeAssetNetLimit;
@dynamic publicFreeAssetNetUsage;
@dynamic publicLatestFreeNetTime;

typedef struct AssetIssueContract__storage_ {
  uint32_t _has_storage_[1];
  int32_t trxNum;
  int32_t num;
  int32_t voteScore;
  NSData *ownerAddress;
  NSData *name;
  NSData *abbr;
  NSMutableArray *frozenSupplyArray;
  NSData *description_p;
  NSData *URL;
  int64_t totalSupply;
  int64_t startTime;
  int64_t endTime;
  int64_t freeAssetNetLimit;
  int64_t publicFreeAssetNetLimit;
  int64_t publicFreeAssetNetUsage;
  int64_t publicLatestFreeNetTime;
} AssetIssueContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "abbr",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Abbr,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, abbr),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "totalSupply",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_TotalSupply,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, totalSupply),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "frozenSupplyArray",
        .dataTypeSpecific.className = GPBStringifySymbol(AssetIssueContract_FrozenSupply),
        .number = AssetIssueContract_FieldNumber_FrozenSupplyArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, frozenSupplyArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "trxNum",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_TrxNum,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, trxNum),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "num",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Num,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, num),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "startTime",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_StartTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, startTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "endTime",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_EndTime,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, endTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "voteScore",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_VoteScore,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, voteScore),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_Description_p,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_URL,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "freeAssetNetLimit",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_FreeAssetNetLimit,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, freeAssetNetLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "publicFreeAssetNetLimit",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_PublicFreeAssetNetLimit,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, publicFreeAssetNetLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "publicFreeAssetNetUsage",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_PublicFreeAssetNetUsage,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, publicFreeAssetNetUsage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "publicLatestFreeNetTime",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FieldNumber_PublicLatestFreeNetTime,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(AssetIssueContract__storage_, publicLatestFreeNetTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AssetIssueContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AssetIssueContract__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\025!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AssetIssueContract_FrozenSupply

@implementation AssetIssueContract_FrozenSupply

@dynamic frozenAmount;
@dynamic frozenDays;

typedef struct AssetIssueContract_FrozenSupply__storage_ {
  uint32_t _has_storage_[1];
  int64_t frozenAmount;
  int64_t frozenDays;
} AssetIssueContract_FrozenSupply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "frozenAmount",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FrozenSupply_FieldNumber_FrozenAmount,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AssetIssueContract_FrozenSupply__storage_, frozenAmount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "frozenDays",
        .dataTypeSpecific.className = NULL,
        .number = AssetIssueContract_FrozenSupply_FieldNumber_FrozenDays,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AssetIssueContract_FrozenSupply__storage_, frozenDays),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AssetIssueContract_FrozenSupply class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AssetIssueContract_FrozenSupply__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ParticipateAssetIssueContract

@implementation ParticipateAssetIssueContract

@dynamic ownerAddress;
@dynamic toAddress;
@dynamic assetName;
@dynamic amount;

typedef struct ParticipateAssetIssueContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *toAddress;
  NSData *assetName;
  int64_t amount;
} ParticipateAssetIssueContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_ToAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "assetName",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_AssetName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, assetName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = ParticipateAssetIssueContract_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ParticipateAssetIssueContract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ParticipateAssetIssueContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ParticipateAssetIssueContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeployContract

@implementation DeployContract

@dynamic ownerAddress;
@dynamic script;

typedef struct DeployContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *script;
} DeployContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = DeployContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeployContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "script",
        .dataTypeSpecific.className = NULL,
        .number = DeployContract_FieldNumber_Script,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DeployContract__storage_, script),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeployContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeployContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - FreezeBalanceContract

@implementation FreezeBalanceContract

@dynamic ownerAddress;
@dynamic frozenBalance;
@dynamic frozenDuration;

typedef struct FreezeBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  int64_t frozenBalance;
  int64_t frozenDuration;
} FreezeBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "frozenBalance",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_FrozenBalance,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, frozenBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "frozenDuration",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_FrozenDuration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, frozenDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FreezeBalanceContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FreezeBalanceContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnfreezeBalanceContract

@implementation UnfreezeBalanceContract

@dynamic ownerAddress;

typedef struct UnfreezeBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
} UnfreezeBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UnfreezeBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnfreezeBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnfreezeBalanceContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnfreezeBalanceContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnfreezeAssetContract

@implementation UnfreezeAssetContract

@dynamic ownerAddress;

typedef struct UnfreezeAssetContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
} UnfreezeAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UnfreezeAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnfreezeAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnfreezeAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnfreezeAssetContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - WithdrawBalanceContract

@implementation WithdrawBalanceContract

@dynamic ownerAddress;

typedef struct WithdrawBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
} WithdrawBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WithdrawBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WithdrawBalanceContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WithdrawBalanceContract__storage_)
                                         flags:0];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateAssetContract

@implementation UpdateAssetContract

@dynamic ownerAddress;
@dynamic description_p;
@dynamic URL;
@dynamic newLimit;
@dynamic newPublicLimit;

typedef struct UpdateAssetContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *description_p;
  NSData *URL;
  int64_t newLimit;
  int64_t newPublicLimit;
} UpdateAssetContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "URL",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, URL),
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "newLimit",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_NewLimit,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, newLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "newPublicLimit",
        .dataTypeSpecific.className = NULL,
        .number = UpdateAssetContract_FieldNumber_NewPublicLimit,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UpdateAssetContract__storage_, newPublicLimit),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateAssetContract class]
                                     rootClass:[ContractRoot class]
                                          file:ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateAssetContract__storage_)
                                         flags:0];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
